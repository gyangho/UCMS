<!DOCTYPE html>
<html lang="ko">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>면접관 시간 설정 - 면접 타임테이블 생성</title>
  <link rel="stylesheet" href="/styles/style.css">
  <style>
    body {
      margin: 0;
    }

    .container {
      max-width: 1200px;
      margin: 30px auto;
      padding: 20px;
    }

    .title {
      font-size: 2rem;
      color: #333;
      margin-bottom: 30px;
      text-align: center;
    }

    .time-settings {
      display: grid;
      gap: 20px;
    }

    .interviewer-section {
      background: white;
      border: 2px solid #e0e0e0;
      border-radius: 10px;
      padding: 20px;
    }

    .interviewer-header {
      display: flex;
      align-items: center;
      gap: 15px;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid #e0e0e0;
    }

    .interviewer-avatar {
      width: 50px;
      height: 50px;
      background: #667eea;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: bold;
      font-size: 1.5rem;
    }

    .interviewer-info h3 {
      margin: 0;
      color: #333;
    }

    .interviewer-authority {
      color: #666;
      font-size: 0.9rem;
    }

    .date-sections {
      display: grid;
      gap: 15px;
    }

    .date-section {
      background: #f8f9ff;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      padding: 15px;
    }

    .date-title {
      font-weight: bold;
      color: #333;
      margin-bottom: 15px;
      font-size: 1.1rem;
    }

    .time-options {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 10px;
    }

    .time-option {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .time-checkbox {
      width: 18px;
      height: 18px;
      accent-color: #667eea;
    }

    .time-label {
      font-size: 0.9rem;
      color: #333;
      cursor: pointer;
    }

    .special-options {
      margin-top: 15px;
      padding-top: 15px;
      border-top: 1px solid #e0e0e0;
    }

    .special-option {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 8px;
    }

    .special-checkbox {
      width: 18px;
      height: 18px;
      accent-color: #667eea;
    }

    .special-label {
      font-size: 0.9rem;
      color: #333;
      cursor: pointer;
    }

    .btn-container {
      text-align: center;
      margin-top: 40px;
    }

    .btn {
      padding: 12px 30px;
      font-size: 1.1rem;
      border: none;
      border-radius: 25px;
      cursor: pointer;
      transition: all 0.3s ease;
      margin: 0 10px;
    }

    .btn-primary {
      background: #667eea;
      color: white;
    }

    .btn-primary:hover {
      background: #5a6fd8;
    }

    .btn-secondary {
      background: #6c757d;
      color: white;
    }

    .btn-secondary:hover {
      background: #5a6268;
    }

    .loading {
      display: none;
      text-align: center;
      margin: 20px 0;
    }

    .spinner {
      border: 3px solid #f3f3f3;
      border-top: 3px solid #667eea;
      border-radius: 50%;
      width: 30px;
      height: 30px;
      animation: spin 1s linear infinite;
      margin: 0 auto;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    .summary {
      background: #f8f9ff;
      border: 2px solid #e0e0e0;
      border-radius: 10px;
      padding: 20px;
      margin-bottom: 30px;
    }

    .summary h3 {
      margin-bottom: 15px;
      color: #333;
    }

    .summary-item {
      display: flex;
      justify-content: space-between;
      margin-bottom: 8px;
      padding: 5px 0;
    }

    .summary-label {
      color: #666;
    }

    .summary-value {
      font-weight: bold;
      color: #333;
    }
  </style>
</head>

<body>
<%- include('../header') %>

<div class="container">
  <h1 class="title">면접관 시간 설정</h1>

  <div class="summary">
    <h3>면접 정보 요약</h3>
    <div class="summary-item">
      <span class="summary-label">폼 ID:</span>
      <span class="summary-value"><%= formId %></span>
    </div>
    <div class="summary-item">
      <span class="summary-label">면접 날짜:</span>
      <span class="summary-value"><%= interviewDates.join(', ') %></span>
    </div>
    <div class="summary-item">
      <span class="summary-label">면접관 수:</span>
      <span class="summary-value" id="interviewerCount">로딩 중...</span>
    </div>
  </div>

  <div class="time-settings" id="timeSettings">
    <!-- 면접관별 시간 설정이 여기에 동적으로 추가됩니다 -->
  </div>

  <div class="loading" id="loading">
    <div class="spinner"></div>
    <p>면접 타임테이블을 생성하고 있습니다...</p>
  </div>

  <div class="btn-container">
    <button class="btn btn-secondary" onclick="goBack()">뒤로 가기</button>
    <button class="btn btn-primary" id="generateBtn" onclick="generateTimetable()">타임테이블 생성</button>
  </div>
</div>

<script>
  const formId = '<%= formId %>';
  const interviewDates = <%- JSON.stringify(interviewDates) %>;
  const timeSlots = <%- JSON.stringify(timeSlots) %>;
  let interviewers = [];

  // 페이지 로드 시 면접관 정보 가져오기
  window.addEventListener('load', async () => {
    await loadinterviewers();
  });

  async function loadinterviewers() {
    try {
      // URL에서 planId를 가져오기
      const urlParams = new URLSearchParams(window.location.search);
      const planId = urlParams.get('planId');

      if (!planId) {
        alert('면접 계획 정보를 찾을 수 없습니다. 다시 시작해주세요.');
        window.location.href = '/recruit/interview/plan/selectform';
        return;
      }

      // 데이터베이스에서 면접관 정보를 가져오는 API 호출
      const response = await fetch(`/api/interview/interviewers?planId=${planId}`);
      const data = await response.json();

      if (data.success) {
        interviewers = data.interviewers;
        renderTimeSettings();
        updateSummary();
      } else {
        alert('면접관 정보를 가져올 수 없습니다: ' + data.error);
      }
    } catch (error) {
      console.error('면접관 정보 로드 실패:', error);
      alert('면접관 정보를 로드할 수 없습니다.');
    }
  }

  function renderTimeSettings() {
    const container = document.getElementById('timeSettings');
    container.innerHTML = '';

    interviewers.forEach(interviewer => {
      const section = document.createElement('div');
      section.className = 'interviewer-section';
      section.innerHTML = `
                    <div class="interviewer-header">
                        <div class="interviewer-avatar">${interviewer.name.charAt(0)}</div>
                        <div class="interviewer-info">
                            <h3>${interviewer.name}</h3>
                            <div class="interviewer-authority">${interviewer.authority}</div>
                        </div>
                    </div>
                    <div class="date-sections">
                        ${interviewDates.map(date => `
                            <div class="date-section">
                                <div class="date-title">${date}</div>
                                <div class="time-options">
                                    ${timeSlots.map(timeSlot => `
                                        <div class="time-option">
                                            <input type="checkbox" 
                                                   class="time-checkbox" 
                                                   id="${interviewer.id}_${date}_${timeSlot}"
                                                   data-interviewer="${interviewer.id}"
                                                   data-date="${date}"
                                                   data-time="${timeSlot}">
                                            <label class="time-label" for="${interviewer.id}_${date}_${timeSlot}">${timeSlot}</label>
                                        </div>
                                    `).join('')}
                                </div>
                                <div class="special-options">
                                    <div class="special-option">
                                        <input type="checkbox" 
                                               class="special-checkbox" 
                                               id="${interviewer.id}_${date}_no_time"
                                               data-interviewer="${interviewer.id}"
                                               data-date="${date}"
                                               data-time="no_time">
                                        <label class="special-label" for="${interviewer.id}_${date}_no_time">가능 시간 없음</label>
                                    </div>
                                    <div class="special-option">
                                        <input type="checkbox" 
                                               class="special-checkbox" 
                                               id="${interviewer.id}_${date}_all_time"
                                               data-interviewer="${interviewer.id}"
                                               data-date="${date}"
                                               data-time="all_time">
                                        <label class="special-label" for="${interviewer.id}_${date}_all_time">모든 면접시간 참여</label>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                `;
      container.appendChild(section);
    });

    // 체크박스 이벤트 리스너 추가
    addCheckboxListeners();
  }

  function addCheckboxListeners() {
    // 특별 옵션 체크박스 이벤트
    document.querySelectorAll('.special-checkbox').forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        const interviewerId = this.getAttribute('data-interviewer');
        const date = this.getAttribute('data-date');
        const time = this.getAttribute('data-time');

        if (this.checked) {
          // 다른 모든 체크박스 해제
          document.querySelectorAll(`[data-interviewer="${interviewerId}"][data-date="${date}"]`).forEach(cb => {
            if (cb !== this) {
              cb.checked = false;
            }
          });
        }
      });
    });

    // 일반 시간 체크박스 이벤트
    document.querySelectorAll('.time-checkbox').forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        const interviewerId = this.getAttribute('data-interviewer');
        const date = this.getAttribute('data-date');

        if (this.checked) {
          // 특별 옵션 체크박스 해제
          document.querySelectorAll(`[data-interviewer="${interviewerId}"][data-date="${date}"].special-checkbox`).forEach(cb => {
            cb.checked = false;
          });
        }
      });
    });
  }

  function updateSummary() {
    document.getElementById('interviewerCount').textContent = interviewers.length + '명';
  }

  function collectTimeInfo() {
    const timeInfo = {};

    interviewers.forEach(interviewer => {
      timeInfo[interviewer.id] = {};

      interviewDates.forEach(date => {
        timeInfo[interviewer.id][date] = {};

        // 모든 시간대를 false로 초기화
        timeSlots.forEach(timeSlot => {
          timeInfo[interviewer.id][date][timeSlot] = false;
        });

        // 선택된 시간들 수집
        document.querySelectorAll(`[data-interviewer="${interviewer.id}"][data-date="${date}"]:checked`).forEach(checkbox => {
          const time = checkbox.getAttribute('data-time');
          if (time !== 'no_time' && time !== 'all_time') {
            timeInfo[interviewer.id][date][time] = true;
          } else if (time === 'all_time') {
            // 모든 시간을 true로 설정
            timeSlots.forEach(timeSlot => {
              timeInfo[interviewer.id][date][timeSlot] = true;
            });
          }
        });
      });
    });

    return timeInfo;
  }

  async function generateTimetable() {
    const timeInfo = collectTimeInfo();
    console.log(JSON.stringify(timeInfo));

    // 최소한 하나의 시간이 선택되었는지 확인
    let hasAnyTimeSelected = false;
    Object.values(timeInfo).forEach(interviewer => {
      Object.values(interviewer).forEach(times => {
        if (JSON.stringify(times).includes('true')) {
          hasAnyTimeSelected = true;
          return;
        }
      });
    });

    if (!hasAnyTimeSelected) {
      alert('최소한 하나의 면접관이 참여 가능한 시간을 선택해주세요.');
      return;
    }

    document.getElementById('loading').style.display = 'block';
    document.getElementById('generateBtn').disabled = true;

    try {
      // URL에서 planId와 formId를 가져오기
      const urlParams = new URLSearchParams(window.location.search);
      const planId = urlParams.get('planId');
      const formId = urlParams.get('formId');

      if (!planId || !formId) {
        alert('면접 계획 정보를 찾을 수 없습니다. 다시 시작해주세요.');
        window.location.href = '/recruit/interview/plan/selectform';
        return;
      }

      const response = await fetch('/recruit/interview/plan/interviewer/timeinfo', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          timeInfo,
          planId: planId,
          formId: formId
        })
      });

      const data = await response.json();

      if (data.success) {
        alert(data.message);
        console.log('면접 응답 데이터:', data.responses);
        // 여기서 타임테이블 생성 결과를 처리할 수 있습니다
        window.location.href = '/recruit/interview/plan';
      } else {
        alert('오류가 발생했습니다: ' + data.error);
      }
    } catch (error) {
      console.error('타임테이블 생성 실패:', error);
      alert('타임테이블을 생성할 수 없습니다.');
    } finally {
      document.getElementById('loading').style.display = 'none';
      document.getElementById('generateBtn').disabled = false;
    }
  }

  function goBack() {
    window.location.href = '/recruit/interview/plan/interviewer/add';
  }
</script>
</body>

</html>